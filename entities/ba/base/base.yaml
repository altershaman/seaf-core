imports:
  - templates/icons.yaml

entities:

  seaf.ba.meta:
    title: Метамодель БА
    description: Сущность для представлений БА

    schema: # Сущность seaf.ba.meta содержит только меню и общие презентации для БА и не предполагает, что для нее будут объявлены объекты

    menu: >
      (
        $treePaths:= function($nested, $items, $i, $path) {(
          $path:= $path!="" and $nested[$i] ? $path & "/" & $nested[$i].title : $path="" and $nested[$i] ? $nested[$i].title; 
          $items:= $nested[$i].link ? $append($items, {"location": $path, "link": $nested[$i].link, "order": $nested[$i].order? $nested[$i].order}): $items;
          $items:= $count($nested[$i].includes) > 0 ?
            $append($items, $treePaths($nested[$i].includes, [], 0, $path)): 
            $items;
          $i<$count($nested)-1 ? $treePaths($nested, $items, $i+1, $substringBefore($path, "/" & $nested[$i].title)) : $items
        )}; 

        $menu:= $reduce($map($$."seaf.nav", function($v) {(
          $distinct($treePaths($v, [], 0, ""))
        )}), $append)
      )


    presentations:

      domain_map:
        type: markdown
        template: templates/domain_map.md

      objects_domain_structure:
        type: smartants
        source: >
          (
            $getSymbol:= function($title, $entity_id, $symbol_width) {(
                $symbol_title:= $split($entity_id, ".")[-1];
                $symbol_obj:= $eval("$.\"seaf.icons\"." & $symbol_title);
                $symbol_gliph:= $symbol_obj.gliph;
                $symbol_template:= $symbol_gliph ?
                  $match($symbol_gliph, /^(<svg)[^>]+>/, 1).match &
                  '<rect x="0" y="-960" width={{vbWidth}} height="960" rx="300" fill="' & $symbol_obj.back_color & '"/>' &
                  '<text style="font-size:800px;" x="1200" y="-250" fill="' & $symbol_obj.fore_color & '" font-family="monospace">{{title}}</text>' &
                  $match($symbol_gliph, /(<path)[^>]+>/, 1).match &
                  '</svg>'
                ;
                $symbol_template:= $symbol_template
                    ? $symbol_template
                    : $."seaf.icons".no_icon;
                $symbol_svg:= $replace($symbol_template, /\{\{title\}\}/, $title);
                $symbol_svg:= $replace($symbol_svg, /\{\{fore_color\}\}/, $symbol_obj.fore_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{back_color\}\}/, $symbol_obj.back_color);
                $symbol_svg:= $replace($symbol_svg, /\{\{absWidth\}\}/, $string($symbol_width));
                $symbol_svg:= $replace($symbol_svg, /\{\{vbWidth\}\}/, $string(4000*$symbol_width/100));
                {"title": $symbol_title & "_" & $title, "svg": $symbol_svg}
            )};

            $pre_nodes:= $arch_objects($$).$map($, function($v) {(
                $title:= $split($.object_id, ".")[-1];
                $size:= $length($title);
                $symbol_width:= 25 + ($size > 7 ? $size*14 : $size*16 );
                $symbol:= $getSymbol($title, $.entity_id, $symbol_width);
                {"nodes": {
                    $.object_id: {
                        "title": $title, 
                        "symbol": $symbol.title}
                    },
                "symbols": {
                    $symbol.title: $symbol.svg}
                };
            )});

            {"config": {
              "distance": 10,
              "trackWidth": 24,
              /*"hideBoundaryTitles": true,*/
              "hideLeafTitles": true
              },
             "symbols": $merge($pre_nodes.symbols), 
             "nodes": $merge($pre_nodes.nodes)
            } 


          )

      # ba_metamodel_grid:
      #   type: mkr-grid
      #   source: >
      #     (
      #       {
      #           "type": "rows",
      #           "items": [
      #                       { "type": "columns",
      #                         "items": [
      #                                 { "type": "rows",
      #                                   "width": "40%",
      #                                   "items": [


      #                                           { "title": "Участники",
      #                                             "icon": "person",
      #                                             "style": {
      #                                                   "border": true,
      #                                                   "padding": "12px",
      #                                                   "margin": "4px"
      #                                             },
      #                                             "src": ""
      #                                           },


      #                                           { "title": "Продукты",
      #                                             "icon": "shopping_cart",
      #                                             "style": {
      #                                                   "border": true,
      #                                                   "padding": "12px",
      #                                                   "margin": "4px"
      #                                             },
      #                                             "src": ""
      #                                           },


      #                                           { "title": "Процессы",
      #                                             "icon": "conveyor_belt",
      #                                             "style": {
      #                                                   "border": true,
      #                                                   "padding": "12px",
      #                                                   "margin": "4px"
      #                                             },
      #                                             "src": ""
      #                                           },


      #                                           { "title": "Ресурсы",
      #                                             "icon": "view_in_ar",
      #                                             "style": {
      #                                                   "border": true,
      #                                                   "padding": "12px",
      #                                                   "margin": "4px"
      #                                             },
      #                                             "src": ""
      #                                           }


      #                                   ]
      #                                 },

      #                                 {"type": "rows",
      #                                   "width": "60%",
      #                                   "items": [
      #                                           { "title": "Актуальная метамодель БА",
      #                                             "icon": "model_training",
      #                                               "style": {
      #                                                   "border": true,
      #                                                   "padding": "12px",
      #                                                   "margin": "4px"
      #                                               },
      #                                               "src": "@entity/seaf.ba.meta/ba_metamodel"
      #                                           }
      #                                   ]
      #                                 }


      #                         ]
      #                       }
      #           ]
      #       }         

      #     )

      # ba_metamodel_wrapper:
      #   title: Метамодель БА
      #   description: Актуальная метамодель БА с учетом всех подключенных расширений
      #   type: markdown
      #   template: templates/ba_metamodel_wrapper.md

      # # todo Добавить связи на метамодель
      # # todo Разметить БА неБА и Ресуры-неБА
      # ba_metamodel:
      #   type: smartants
      #   source: >
      #     (
      #       $arch_entities:= $arch_objects_entities($$);
      #       $ba_arch_entities:= $arch_entities[$contains($.entity_id, ".ba.")];

      #       $getSymbol:= function($title, $entity_id, $symbol_width) {(
      #           $symbol_title:= $split($entity_id, ".")[-1];
      #           $symbol_obj:= $eval("$.\"seaf.icons\"." & $symbol_title);
      #           $symbol_gliph:= $symbol_obj.gliph;
      #           $symbol_template:= $symbol_gliph ?
      #             $match($symbol_gliph, /^(<svg)[^>]+>/, 1).match &
      #             '<rect x="0" y="-960" width={{vbWidth}} height="960" rx="300" fill="' & $symbol_obj.back_color & '"/>' &
      #             '<text style="font-size:800px;" x="1200" y="-250" fill="' & $symbol_obj.fore_color & '" font-family="monospace">{{title}}</text>' &
      #             $match($symbol_gliph, /(<path)[^>]+>/, 1).match &
      #             '</svg>'

      #           ;
      #           $symbol_template:= $symbol_template
      #               ? $symbol_template
      #               : $."seaf.icons".no_icon;
      #           $symbol_svg:= $replace($symbol_template, /\{\{title\}\}/, $title);
      #           $symbol_svg:= $replace($symbol_svg, /\{\{fore_color\}\}/, $symbol_obj.fore_color);
      #           $symbol_svg:= $replace($symbol_svg, /\{\{back_color\}\}/, $symbol_obj.back_color);
      #           $symbol_svg:= $replace($symbol_svg, /\{\{absWidth\}\}/, $string($symbol_width));
      #           $symbol_svg:= $replace($symbol_svg, /\{\{vbWidth\}\}/, $string(4000*$symbol_width/100));
      #           {"title": $symbol_title & "_" & $title, "svg": $symbol_svg}
      #       )};

      #       $pre_nodes:= $ba_arch_entities.$map($, function($v) {(
      #           $title:= $v.entity_title;
      #           $size:= $length($title);
      #           $symbol_width:= 25 + ($size > 7 ? $size*14 : $size*16 );
      #           $symbol:= $getSymbol($title, $v.entity_id, $symbol_width);
      #           { "nodes": {
      #                 $.entity_id: {
      #                     "title": $title, 
      #                     "symbol": $symbol.title}
      #                 },
      #              "links": [],   
      #             "symbols": {
      #                 $symbol.title: $symbol.svg}
      #           };
      #       )});

      #       $links:= [
      #                   {   "from": "seaf.ba.parties",
      #                       "to": "seaf.ba.products",
      #                       "title": "заинтересован",
      #                       "style": "->"
      #                   },
      #                   {   "to": "seaf.ba.parties",
      #                       "from": "seaf.ba.products",
      #                       "title": "владелец",
      #                       "style": "->"
      #                   },
      #                   {   "to": "seaf.ba.parties",
      #                       "from": "seaf.ba.processes",
      #                       "title": "владелец",
      #                       "style": "->"
      #                   },
      #                   {   "to": "seaf.ba.products",
      #                       "from": "seaf.ba.processes",
      #                       "title": "относится к",
      #                       "style": "->"
      #                   }

      #                ]; 

      #       {"config": {
      #         "distance": 10,
      #         "trackWidth": 24,
      #         /*"hideBoundaryTitles": true,*/
      #         "hideLeafTitles": true
      #         },
      #        "symbols": $merge($pre_nodes.symbols), 
      #        "nodes": $merge($pre_nodes.nodes),
      #        "links": $links
      #       } 

          
      #     )

functions:

  arch_objects:
    title: Get arch objects
    params:
      - type: object
        title: Область поиска контекстов (глобальный Контекст -- $$)
        alias: ctxG
        required: true
    code: >
      (
        $ctxG:= ctxG;
        $entities:= $arch_objects_entities($ctxG);

        [$map($entities, function($v) {
          $eval("$ctxG." & "\"" & $v.entity_id & "\"").$spread()
            .{"object_id": $keys($),
              "object_title": $.*.title,
              "entity_id": $v.entity_id,
              "entity_title": $v.entity_title 
             }
        }).$reduce($, $append)];
      )
    result:
      type: array
      description: >
        Delivers "arch objects keys" list (array) accompanied with their entities id.



  arch_objects_entities:
    title: Get arch objects entities
    params:
      - type: object
        title: Global context ($$)
        alias: ctxG
        required: true
    code: >
      (
        $ctxG:= ctxG;
        $ctxG.entities.$spread()[$.*.objects and $not("aspects" in $.$keys())].
          {"entity_id": $.$keys(), 
           "entity_title": $.*.title
          };
      )
    result:
      type: array
      description: >
        Delivers "arch object's entities" list (array). 
        Any entity declared wich has "objects" attribute configuired will be insourced in this dataset
